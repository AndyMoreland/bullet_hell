// Generated by CoffeeScript 1.3.3
(function() {
  var DEBUG, DOWN, HEIGHT, IMAGES, LEFT, NOTIFICATION_TIMER, PLAYER_SPEED, RENDER_TIME, RIGHT, SCROLL_SPEED, UP, WIDTH, notify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.g = {}

  window.i = 0;

  RENDER_TIME = 25;

  WIDTH = 600;

  HEIGHT = 800;

  PLAYER_SPEED = 5;

  SCROLL_SPEED = 0.5;

  DEBUG = false;

  IMAGES = {};

  NOTIFICATION_TIMER = null;

  notify = function(message) {
    clearTimeout(NOTIFICATION_TIMER);
    $("#notifications").empty().append(message).show(300);
    return NOTIFICATION_TIMER = window.setTimeout(function() {
      return $("#notifications").hide(300);
    }, 3000);
  };

  g.Game = (function() {

    function Game() {
      this.defeatSecretLevel = __bind(this.defeatSecretLevel, this);

      this.secondLevel = __bind(this.secondLevel, this);

      this.lose = __bind(this.lose, this);

      this.end = __bind(this.end, this);

      this.die = __bind(this.die, this);

      this._displayDeath = __bind(this._displayDeath, this);

      this.initializeKeybindings = __bind(this.initializeKeybindings, this);

      this.initializePlayerStatusTracker = __bind(this.initializePlayerStatusTracker, this);

      this.initialize_player = __bind(this.initialize_player, this);

      this.gameLoop = __bind(this.gameLoop, this);

      this.setupBulletClearer = __bind(this.setupBulletClearer, this);

      this.initializeLevelManager = __bind(this.initializeLevelManager, this);

      this.initializeDebug = __bind(this.initializeDebug, this);

      this.createBackground = __bind(this.createBackground, this);

      this.miscInit = __bind(this.miscInit, this);

      this.initializePlayer = __bind(this.initializePlayer, this);

      this.initalizeBoardBounds = __bind(this.initalizeBoardBounds, this);

      this.setupClear = __bind(this.setupClear, this);

      this.setupCanvas = __bind(this.setupCanvas, this);

      this.loadImages = __bind(this.loadImages, this);
      this.loadImages();
      this.canvas = $("canvas")[0];
      this.score = 0;
      this.renderStack = [];
      this.updateStack = [];
      this.renderCount = 0;
      this.enemyBullets = [];
      this.playerBullets = [];
      this.noRender = false;
      this.setupCanvas();
      this.setupClear();
      this.createBackground();
      this.initalizeBoardBounds();
      this.initializeKeybindings();
      this.initializePlayer();
      this.initializeLevelManager();
      this.miscInit();
      this.initializePlayerStatusTracker();
      this.setupBulletClearer();
      this.initializeDebug();
      this.gameTimer = window.setInterval(this.gameLoop, RENDER_TIME);
    }

    Game.prototype.loadImages = function() {
      IMAGES["25_enemy_1"] = new Image();
      IMAGES["25_enemy_2"] = new Image();
      IMAGES["25_enemy_3"] = new Image();
      IMAGES["25_enemy_4"] = new Image();
      IMAGES["25_enemy_5"] = new Image();
      IMAGES["50_wide_enemy_1"] = new Image();
      IMAGES["50_wide_enemy_2"] = new Image();
      IMAGES["boss"] = new Image();
      IMAGES["player"] = new Image();
      IMAGES["shower"] = new Image();
      IMAGES["25_enemy_1"].src = "/images/sprites/25_enemy_1.png";
      IMAGES["25_enemy_2"].src = "/images/sprites/25_enemy_2.png";
      IMAGES["25_enemy_3"].src = "/images/sprites/25_enemy_3.png";
      IMAGES["25_enemy_4"].src = "/images/sprites/25_enemy_4.png";
      IMAGES["25_enemy_5"].src = "/images/sprites/25_enemy_5.png";
      IMAGES["50_wide_enemy_1"].src = "/images/sprites/50_wide_enemy_1.png";
      IMAGES["50_wide_enemy_2"].src = "/images/sprites/50_wide_enemy_2.png";
      IMAGES["boss"].src = "/images/sprites/boss.png";
      IMAGES["player"].src = "/images/sprites/player.png";
      return IMAGES["shower"].src = "/images/sprites/shower.png";
    };

    Game.prototype.setupCanvas = function() {
      this.context = this.canvas.getContext('2d');
      this.context.lineWidth = 1;
      this.context.strokeStyle = "#000";
      this.context.globalApha = 1.0;
      this.canvas.width = WIDTH;
      return this.canvas.height = HEIGHT;
    };

    Game.prototype.setupClear = function() {
      return this.renderStack.push(new g.CanvasClearer());
    };

    Game.prototype.initalizeBoardBounds = function() {
      return this.board = new g.Board();
    };

    Game.prototype.initializePlayer = function() {
      this.player = new g.Player();
      this.updateStack.push(this.player);
      return this.renderStack.push(this.player);
    };

    Game.prototype.miscInit = function() {
      var level, levelTwo;
      level = new g.TestLevelOne(10, this);
      levelTwo = new g.SecretLevel(10, this);
      this.levelManager.levelQueue.push(level);
      this.levelManager.levelQueue.push(levelTwo);
      this.updateStack.push(this.levelManager);
      return this.renderStack.push(this.levelManager);
    };

    Game.prototype.createBackground = function() {
      this.backgroundLayer = new g.BackgroundLayer();
      this.updateStack.push(this.backgroundLayer);
      return this.renderStack.push(this.backgroundLayer);
    };

    Game.prototype.initializeDebug = function() {
      this.debugLayer = new g.DebugLayer();
      return this.renderStack.push(this.debugLayer);
    };

    Game.prototype.initializeLevelManager = function() {
      return this.levelManager = new g.LevelManager();
    };

    Game.prototype.setupBulletClearer = function() {
      return this.updateStack.push(new g.BulletClearer());
    };

    Game.prototype.gameLoop = function() {
      var renderable, updateable, _i, _j, _len, _len1, _ref, _ref1;
      if (DEBUG) {
        console.group("Render number ", this.renderCount);
      }
      _ref = this.updateStack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        updateable = _ref[_i];
        if (updateable.update) {
          updateable.update();
        }
      }
      _ref1 = this.renderStack;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        renderable = _ref1[_j];
        if (renderable.render && this.noRender === false) {
          renderable.render(this.context);
        }
      }
      if (DEBUG) {
        console.groupEnd();
      }
      return this.renderCount++;
    };

    Game.prototype.initialize_player = function() {
      return this.player = new g.Player();
    };

    Game.prototype.initializePlayerStatusTracker = function() {
      this.statusTracker = new g.PlayerStatusTracker(this.player);
      return this.updateStack.push(this.statusTracker);
    };

    Game.prototype.initializeKeybindings = function() {
      this.keyboardHandler = new g.KeyboardHandler(this);
      return this.updateStack.push(this.keyboardHandler);
    };

    Game.prototype._displayDeath = function() {
      this.context.globalAlpha = 0.5;
      this.context.fillStyle = "#666";
      this.context.fillRect(0, 0, WIDTH, HEIGHT);
      this.context.globalAlpha = 1.0;
      this.context.fillStyle = "#A00";
      this.context.font = "bold 48px Arial";
      this.context.fillText("You have died!", 130, 300);
      this.context.font = "32px Arial";
      return this.context.fillText("Respawning in 3 seconds", 130, 450);
    };

    Game.prototype.die = function() {
      var _this = this;
      this._displayDeath();
      clearInterval(this.gameTimer);
      this.noRender = true;
      return setTimeout(function() {
        _this.noRender = false;
        return _this.gameTimer = setInterval(_this.gameLoop, RENDER_TIME);
      }, 3000);
    };

    Game.prototype.end = function() {
      clearInterval(this.gameTimer);
      this.noRender = true;
      this.context.globalAlpha = 0.5;
      this.context.fillStyle = "#666";
      this.context.fillRect(0, 0, WIDTH, HEIGHT);
      this.context.globalAlpha = 1.0;
      this.context.fillStyle = "#A00";
      this.context.font = "bold 48px Arial";
      this.context.fillText("You have won!", 130, 300);
      this.context.font = "32px Arial";
      this.context.fillText("Score: " + this.score + this.renderCount * 10, 130, 400);
      this.highScoreName = prompt("Enter name for high score chart:");
      if (this.highScoreName.match(/.*(wendy|kip|vang).*/i)) {
        return this.secondLevel();
      }
    };

    Game.prototype.lose = function() {
      clearInterval(this.gameTimer);
      this.noRender = true;
      this.context.globalAlpha = 0.5;
      this.context.fillStyle = "#666";
      this.context.fillRect(0, 0, WIDTH, HEIGHT);
      this.context.globalAlpha = 1.0;
      this.context.fillStyle = "#A00";
      this.context.font = "bold 48px Arial";
      this.context.fillText("You lose!", 130, 300);
      this.context.font = "32px Arial";
      return this.context.fillText("Reload the page to play again!", 130, 400);
    };

    Game.prototype.secondLevel = function() {
      var _this = this;
      setTimeout(function() {
        _this.noRender = false;
        _this.gameTimer = setInterval(_this.gameLoop, RENDER_TIME);
        _this.levelManager.advanceLevel();
        _this.player.hp = 20;
        _this.player.lives = 5;
        return _this.renderCount = 0;
      }, 3000);
      this.context.clearRect(0, 0, WIDTH, HEIGHT);
      this.context.fillStyle = "#000";
      this.context.font = "bold 48px Arial";
      this.context.fillText("Secret level unlocked", 100, 300);
      this.context.font = "32px Arial";
      this.context.fillText("Starting in 3 seconds", 130, 400);
      this.keyboardHandler.right = false;
      this.keyboardHandler.left = false;
      this.keyboardHandler.down = false;
      return this.keyboardHandler.up = false;
    };

    Game.prototype.defeatSecretLevel = function() {
      return window.location = "/victory";
    };

    return Game;

  })();

  g.Point = (function() {

    function Point(x, y) {
      this.dup = __bind(this.dup, this);

      this.sum = __bind(this.sum, this);

      this.difference = __bind(this.difference, this);

      this.magnitude = __bind(this.magnitude, this);

      this.scalarMultiply = __bind(this.scalarMultiply, this);

      this.normalize = __bind(this.normalize, this);
      this.x = arguments[0], this.y = arguments[1];
      if (this.x === void 0 || this.y === void 0) {
        console.warn("Point coordinates invalid.");
      }
    }

    Point.prototype.normalize = function() {
      var scale;
      scale = this.magnitude();
      this.x /= scale;
      this.y /= scale;
      return this;
    };

    Point.prototype.scalarMultiply = function(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    };

    Point.prototype.magnitude = function() {
      return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
    };

    Point.prototype.difference = function(vec2) {
      return new g.Point(this.x - vec2.x, this.y - vec2.y);
    };

    Point.prototype.sum = function(vec2) {
      return new g.Point(this.x + vec2.x, this.y + vec2.y);
    };

    Point.prototype.dup = function() {
      return new g.Point(this.x, this.y);
    };

    return Point;

  })();

  UP = new g.Point(0, -1);

  DOWN = new g.Point(0, 1);

  LEFT = new g.Point(-1, 0);

  RIGHT = new g.Point(1, 0);

  g.Rect = (function() {

    function Rect(x, y, width, height) {
      this.containsPoint = __bind(this.containsPoint, this);
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      if (this.x === void 0 || this.y === void 0 || this.width === void 0 || this.height === void 0) {
        console.warn("Rect coordinates invalid.");
      }
    }

    Rect.prototype.containsPoint = function(point) {
      var _ref;
      return (_ref = point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height) != null ? _ref : {
        "true": false
      };
    };

    return Rect;

  })();

  g.Board = (function() {

    function Board() {
      this.bounds = new g.Rect(0, 0, WIDTH, HEIGHT);
    }

    return Board;

  })();

  g.CanvasClearer = (function() {

    function CanvasClearer() {
      this.render = __bind(this.render, this);

    }

    CanvasClearer.prototype.render = function(context) {
      return context.clearRect(0, 0, WIDTH, HEIGHT);
    };

    return CanvasClearer;

  })();

  g.BulletClearer = (function() {

    function BulletClearer() {}

    BulletClearer.prototype.update = function() {
      game.playerBullets = [];
      return game.enemyBullets = [];
    };

    return BulletClearer;

  })();

  g.BackgroundLayer = (function() {

    function BackgroundLayer() {
      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);

      var _this = this;
      this.offset = 0;
      this.ready = false;
      this.image = new Image();
      this.image.onload = function() {
        _this.ready = true;
        return _this.offset = -2 * _this.image.height + (game.canvas.height - _this.image.height);
      };
      this.image.src = "/images/stars.jpeg";
    }

    BackgroundLayer.prototype.update = function() {
      if (this.ready) {
        if (this.offset <= 0) {
          return this.offset += SCROLL_SPEED;
        } else {
          return this.offset -= this.image.height;
        }
      }
    };

    BackgroundLayer.prototype.render = function(context) {
      if (this.ready) {
        context.fillStyle = "#000";
        context.fillRect(0, 0, WIDTH, HEIGHT);
        context.drawImage(this.image, 0, this.offset);
        context.drawImage(this.image, 0, this.image.height + this.offset);
        return context.drawImage(this.image, 0, this.image.height * 2 + this.offset);
      }
    };

    return BackgroundLayer;

  })();

  g.Player = (function() {

    function Player() {
      this.render = __bind(this.render, this);

      this.makeInvulnerable = __bind(this.makeInvulnerable, this);

      this.die = __bind(this.die, this);

      this.detectCollision = __bind(this.detectCollision, this);
      this.size = new g.Point(10, 10);
      this.pos = new g.Point(WIDTH / 2, HEIGHT - this.size.y);
      this.speed = PLAYER_SPEED;
      this.firing = false;
      this.invulnTime = 0;
      this.hp = 10;
      this.lives = 4;
      this.bullets = new g.CircularBuffer();
      this.weapon = new g.CompositeWeapon({
        weapons: [
          new g.ShotWeapon({
            color: "#00F",
            speed: 10,
            playerOwned: true,
            direction: UP
          }), new g.ShotWeapon({
            color: "#00F",
            speed: 10,
            playerOwned: true,
            direction: new g.Point(-.28, -.95)
          }), new g.ShotWeapon({
            color: "#00F",
            speed: 10,
            playerOwned: true,
            direction: new g.Point(.28, -.95)
          })
        ]
      });
    }

    Player.prototype.detectCollision = function() {
      var bullet, _i, _len, _ref, _results;
      _ref = game.enemyBullets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (this.pos.difference(bullet.pos.sum(new g.Point(0, 5))).magnitude() < bullet.size / 2 + this.size.x / 3) {
          if (!(this.invulnTime > 0)) {
            this.hp--;
          }
          if (this.hp <= 0) {
            this.die();
          } else {

          }
          bullet.die();
          _results.push(this.makeInvulnerable(10));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Player.prototype.die = function() {
      game.score -= 5000;
      this.hp = 6;
      this.lives--;
      this.invulntime = 40;
      if (this.lives > 0) {
        game.die();
      }
      if (this.lives === 0) {
        return game.lose();
      }
    };

    Player.prototype.makeInvulnerable = function(time) {
      if (!(this.invulnTime > 0)) {
        return this.invulnTime = time;
      }
    };

    Player.prototype.update = function() {
      if (this.pos.x <= 0) {
        this.pos.x = 0;
      }
      if (this.pos.y <= 0) {
        this.pos.y = 0;
      }
      if (this.pos.x >= WIDTH) {
        this.pos.x = WIDTH - 1;
      }
      if (this.pos.y >= HEIGHT) {
        this.pos.y = HEIGHT - 1;
      }
      this.weapon.update(this);
      return this.invulnTime--;
    };

    Player.prototype.render = function(context) {
      if (this.invulnTime > 0) {
        context.globalAlpha = 0.5;
      }
      context.drawImage(IMAGES['player'], this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2);
      context.globalAlpha = 1.0;
      return this.weapon.render(context);
    };

    return Player;

  })();

  g.PlayerStatusTracker = (function() {

    function PlayerStatusTracker(player) {
      this.update = __bind(this.update, this);
      this.player = player;
    }

    PlayerStatusTracker.prototype.update = function() {
      this.player.detectCollision();
      if (!(this.player.hp >= 10)) {
        return this.player.hp += .001;
      }
    };

    return PlayerStatusTracker;

  })();

  g.Bullet = (function() {

    function Bullet(options) {
      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);

      this.die = __bind(this.die, this);
      this.size = (options != null ? options.size : void 0) || 5;
      this.pos = options != null ? options.startPos : void 0;
      this.target = options != null ? options.target : void 0;
      this.speed = options != null ? options.speed : void 0;
      this.direction = options != null ? options.direction : void 0;
      this.lifetime = options != null ? options.lifetime : void 0;
      this.playerOwned = options != null ? options.playerOwned : void 0;
      this.color = options != null ? options.color : void 0;
      this.livedTicks = 0;
      if (options.offset) {
        this.pos = this.pos.sum(options.offset);
      }
    }

    Bullet.prototype.die = function() {
      this.render = null;
      return this.update = null;
    };

    Bullet.prototype.update = function() {
      if (this.pos.x < 0 || this.pos.y < 0 || this.pos.x > game.canvas.width || this.pos.y > game.canvas.height) {
        this.die();
      }
      if (this.playerOwned) {
        return game.playerBullets.push(this);
      } else {
        return game.enemyBullets.push(this);
      }
    };

    Bullet.prototype.render = function(context) {
      context.fillStyle = this.color;
      context.beginPath();
      if (!this.playerOwned) {
        context.arc(this.pos.x, this.pos.y + 10, this.size, Math.PI * 2, 0, true);
      }
      if (this.playerOwned) {
        context.arc(this.pos.x, this.pos.y - 10, this.size, Math.PI * 2, 0, true);
      }
      context.closePath();
      return context.fill();
    };

    return Bullet;

  })();

  g.StraightBullet = (function(_super) {

    __extends(StraightBullet, _super);

    function StraightBullet(options) {
      this.update = __bind(this.update, this);

      var _ref, _ref1;
      StraightBullet.__super__.constructor.call(this, options);
      if ((_ref = this.color) == null) {
        this.color = "#F00";
      }
      if ((_ref1 = this.speed) == null) {
        this.speed = 5;
      }
      this.velocity = this.direction.dup();
      this.velocity.scalarMultiply(this.speed);
    }

    StraightBullet.prototype.update = function() {
      StraightBullet.__super__.update.call(this);
      this.pos.y += this.velocity.y;
      return this.pos.x += this.velocity.x;
    };

    return StraightBullet;

  })(g.Bullet);

  g.HomingBullet = (function(_super) {

    __extends(HomingBullet, _super);

    function HomingBullet(options) {
      this.update = __bind(this.update, this);

      var _ref, _ref1;
      HomingBullet.__super__.constructor.call(this, options);
      if ((_ref = this.color) == null) {
        this.color = "#0F0";
      }
      if ((_ref1 = this.speed) == null) {
        this.speed = 1;
      }
    }

    HomingBullet.prototype.update = function() {
      var vec;
      HomingBullet.__super__.update.call(this);
      vec = new g.Point(this.target.pos.x - this.pos.x, this.target.pos.y - this.pos.y);
      vec.normalize();
      vec.scalarMultiply(this.speed);
      if (this.livedTicks >= this.lifetime) {
        this.render = null;
        this.update = null;
      } else {
        this.livedTicks++;
      }
      this.pos.x += vec.x;
      return this.pos.y += vec.y;
    };

    return HomingBullet;

  })(g.Bullet);

  g.KeyboardHandler = (function() {

    function KeyboardHandler(game) {
      this.update = __bind(this.update, this);

      var _this = this;
      this.game = game;
      this.up = false;
      this.down = false;
      this.left = false;
      this.right = false;
      $(window).on({
        "keydown": function(ev) {
          if (ev.keyCode === 37) {
            _this.left = true;
          }
          if (ev.keyCode === 38) {
            _this.up = true;
          }
          if (ev.keyCode === 39) {
            _this.right = true;
          }
          if (ev.keyCode === 40) {
            _this.down = true;
          }
          if (ev.keyCode === 32) {
            return _this.game.player.firing = true;
          }
        },
        "keyup": function(ev) {
          if (ev.keyCode === 37) {
            _this.left = false;
          }
          if (ev.keyCode === 38) {
            _this.up = false;
          }
          if (ev.keyCode === 39) {
            _this.right = false;
          }
          if (ev.keyCode === 40) {
            _this.down = false;
          }
          if (ev.keyCode === 32) {
            return _this.game.player.firing = false;
          }
        }
      });
    }

    KeyboardHandler.prototype.update = function() {
      if (this.right) {
        this.game.player.pos.x += this.game.player.speed;
      }
      if (this.down) {
        this.game.player.pos.y += this.game.player.speed;
      }
      if (this.left) {
        this.game.player.pos.x -= this.game.player.speed;
      }
      if (this.up) {
        return this.game.player.pos.y -= this.game.player.speed;
      }
    };

    return KeyboardHandler;

  })();

  g.DebugLayer = (function() {

    function DebugLayer() {}

    DebugLayer.prototype.render = function(context) {
      return context.strokeRect(0, 0, WIDTH, HEIGHT);
    };

    return DebugLayer;

  })();

  g.CircularBuffer = (function() {

    function CircularBuffer(length) {
      this.push = __bind(this.push, this);
      this.length = length || 100;
      this.storage = [];
      this.cursor = 0;
    }

    CircularBuffer.prototype.push = function(item) {
      if (this.storage.length < this.length) {
        return this.storage.push(item);
      } else {
        if (this.cursor === this.length) {
          this.cursor = 0;
        }
        if (this.storage[this.cursor].kill) {
          this.storage[this.cursor].kill();
        }
        this.storage[this.cursor] = item;
        return this.cursor++;
      }
    };

    return CircularBuffer;

  })();

  g.LevelManager = (function() {

    function LevelManager() {
      this.advanceLevel = __bind(this.advanceLevel, this);

      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);
      this.currentLevel = null;
      this.levelQueue = [];
    }

    LevelManager.prototype.update = function() {
      if (!this.currentLevel) {
        this.currentLevel = this.levelQueue.shift();
      }
      if (this.currentLevel) {
        return this.currentLevel.update();
      }
    };

    LevelManager.prototype.render = function(context) {
      if (this.currentLevel) {
        return this.currentLevel.render(context);
      }
    };

    LevelManager.prototype.advanceLevel = function() {
      return this.currentLevel = this.levelQueue.shift();
    };

    return LevelManager;

  })();

  g.Level = (function() {

    function Level(startTick) {
      this.end = __bind(this.end, this);

      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);
      this.activeEvents = [];
      this.eventQueue = [];
      this.startTick = startTick;
      this.ended = false;
    }

    Level.prototype.update = function() {
      var event, _i, _len, _ref, _ref1, _results;
      if (this.eventQueue[0] && this.eventQueue[0].startTick + this.startTick <= game.renderCount) {
        this.activeEvents.push(this.eventQueue.shift().start(game.renderCount));
      }
      if (((_ref = this.activeEvents[this.activeEvents.length - 1]) != null ? _ref.ended : void 0) && this.eventQueue.length === 0) {
        this.end();
      }
      if (this.activeEvents[0]) {
        if ((game.renderCount - this.activeEvents[0].startTime) >= 6000) {
          this.activeEvents.shift();
        }
      }
      _ref1 = this.activeEvents;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        event = _ref1[_i];
        if (event.update) {
          _results.push(event.update());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Level.prototype.render = function(context) {
      var event, _i, _len, _ref, _results;
      _ref = this.activeEvents;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (event.render) {
          _results.push(event.render(context));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Level.prototype.end = function() {
      var _ref;
      this.ended = true;
      return (_ref = this.currentEvent) != null ? _ref.end() : void 0;
    };

    return Level;

  })();

  g.Event = (function() {

    function Event(startTick, level) {
      this.end = __bind(this.end, this);

      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);

      this.start = __bind(this.start, this);

      this.shiftEnemies = __bind(this.shiftEnemies, this);
      this.startTick = startTick;
      this.level = level;
      this.enemyQueue = [];
      this.activeEnemyQueue = [];
      this.ended = false;
      this.startTime = -1;
    }

    Event.prototype.shiftEnemies = function() {
      var enemy, _results;
      enemy = null;
      _results = [];
      while ((enemy = this.enemyQueue[0])) {
        if (!(enemy.startTick + this.level.startTick + this.startTick <= game.renderCount)) {
          break;
        }
        _results.push(this.activeEnemyQueue.push(this.enemyQueue.shift()));
      }
      return _results;
    };

    Event.prototype.start = function(time) {
      this.startTime = time;
      return this;
    };

    Event.prototype.update = function() {
      var enemy, _i, _len, _ref, _results;
      if (this.enemyQueue.length > 0) {
        this.shiftEnemies();
      }
      _ref = this.activeEnemyQueue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        _results.push(enemy.update());
      }
      return _results;
    };

    Event.prototype.render = function(context) {
      var enemy, _i, _len, _ref, _results;
      _ref = this.activeEnemyQueue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        _results.push(enemy.render(context));
      }
      return _results;
    };

    Event.prototype.end = function() {
      var enemy, _i, _len, _ref, _results;
      this.ended = true;
      _ref = this.activeEnemyQueue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        _results.push(enemy.die());
      }
      return _results;
    };

    return Event;

  })();

  g.Enemy = (function() {

    function Enemy(options) {
      this.die = __bind(this.die, this);

      this.render = __bind(this.render, this);

      this.renderSelf = __bind(this.renderSelf, this);

      this.update = __bind(this.update, this);

      this.flash = __bind(this.flash, this);
      this.scoreValue = 500;
      this.startTick = options != null ? options.startTick : void 0;
      this.weapon = options != null ? options.weapon : void 0;
      this.behavior = options != null ? options.behavior : void 0;
      this.pos = options != null ? options.pos : void 0;
      this.event = options != null ? options.event : void 0;
      this.firing = true;
      this.size = new g.Point(25, 25);
      this.image = options != null ? options.image : void 0;
      this.flashing = 0;
    }

    Enemy.prototype.flash = function() {
      return this.flashing = 40;
    };

    Enemy.prototype.update = function() {
      if (this.behavior) {
        this.behavior.update(this);
      }
      if (this.weapon) {
        return this.weapon.update(this);
      }
    };

    Enemy.prototype.renderSelf = function(context) {
      return context.drawImage(this.image, this.pos.x - this.size.x / 2, this.pos.y - this.size.y / 2);
    };

    Enemy.prototype.render = function(context) {
      if (this.renderSelf) {
        this.renderSelf(context);
      }
      if (this.weapon) {
        return this.weapon.render(context);
      }
    };

    Enemy.prototype.die = function() {
      this.renderSelf = null;
      this.behavior = null;
      this.weapon.cleanup();
      this.firing = false;
      return game.score += this.scoreValue;
    };

    return Enemy;

  })();

  g.CompositeBehavior = (function() {

    function CompositeBehavior(behaviors) {
      this.behaviors = behaviors;
    }

    CompositeBehavior.prototype.update = function(actor) {
      var behavior, _i, _len, _ref, _results;
      _ref = this.behaviors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        behavior = _ref[_i];
        if (behavior.update) {
          _results.push(behavior.update(actor));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return CompositeBehavior;

  })();

  g.Behavior = (function() {

    function Behavior(options) {
      this.update = __bind(this.update, this);
      this.speed = (options != null ? options.speed : void 0) || 3;
      this.direction = options != null ? options.direction : void 0;
      this.velocity = this.direction.dup();
      this.velocity.scalarMultiply(this.speed);
      this.acceleration = options != null ? options.acceleration : void 0;
    }

    Behavior.prototype.update = function(actor) {
      actor.pos.x += this.velocity.x;
      return actor.pos.y += this.velocity.y;
    };

    return Behavior;

  })();

  g.ParabolicMoveBehavior = (function(_super) {

    __extends(ParabolicMoveBehavior, _super);

    function ParabolicMoveBehavior() {
      this.update = __bind(this.update, this);
      return ParabolicMoveBehavior.__super__.constructor.apply(this, arguments);
    }

    ParabolicMoveBehavior.prototype.update = function(actor) {
      ParabolicMoveBehavior.__super__.update.call(this, actor);
      this.velocity.x += this.acceleration.x;
      return this.velocity.y += this.acceleration.y;
    };

    return ParabolicMoveBehavior;

  })(g.Behavior);

  g.DriftingBehavior = (function(_super) {

    __extends(DriftingBehavior, _super);

    function DriftingBehavior(options) {
      DriftingBehavior.__super__.constructor.call(this, {
        direction: DOWN,
        speed: SCROLL_SPEED * 2
      });
    }

    return DriftingBehavior;

  })(g.Behavior);

  g.StandardCompositeBehavior = (function(_super) {

    __extends(StandardCompositeBehavior, _super);

    function StandardCompositeBehavior(options) {
      var newBehaviors;
      StandardCompositeBehavior.__super__.constructor.call(this, options);
      newBehaviors = [new g.Attackable(7), new g.DriftingBehavior(), new g.DeathOnBottomEdgeBehavior()];
      this.behaviors = this.behaviors.concat(newBehaviors);
    }

    return StandardCompositeBehavior;

  })(g.CompositeBehavior);

  g.Attackable = (function() {

    function Attackable(hitPoints) {
      this.hit = __bind(this.hit, this);

      this.update = __bind(this.update, this);
      this.hp = hitPoints;
    }

    Attackable.prototype.update = function(actor) {
      var bullet, _i, _len, _ref, _results;
      _ref = game.playerBullets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (actor.pos.difference(bullet.pos).magnitude() < bullet.size + actor.size.x / 2) {
          this.hit(actor);
          _results.push(bullet.die());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Attackable.prototype.hit = function(actor) {
      this.hp--;
      if (this.hp === 0) {
        return actor.die();
      } else {
        if (actor.flash) {
          return actor.flash();
        }
      }
    };

    return Attackable;

  })();

  g.BossAttackable = (function() {

    function BossAttackable(totalHitpoints, thresholdBehaviorQueue) {
      this.hit = __bind(this.hit, this);

      this.update = __bind(this.update, this);
      this.hp = totalHitpoints;
      this.thresholdBehaviorQueue = thresholdBehaviorQueue;
      window.a = this;
      this.scoreValue = 100000;
    }

    BossAttackable.prototype.update = function(actor) {
      var bullet, _i, _len, _ref, _ref1, _results;
      if (((_ref = this.thresholdBehaviorQueue[0]) != null ? _ref.threshold : void 0) >= this.hp) {
        if (this.thresholdBehaviorQueue[0].position) {
          actor.pos = this.thresholdBehaviorQueue[0].position;
        }
        actor.behavior = new g.CompositeBehavior([this.thresholdBehaviorQueue.shift().behavior, this]);
      }
      _ref1 = game.playerBullets;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        bullet = _ref1[_i];
        if (actor.pos.difference(bullet.pos).magnitude() < bullet.size + actor.size.x / 2) {
          bullet.die();
          _results.push(this.hit(actor));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BossAttackable.prototype.hit = function(actor) {
      this.hp--;
      if (this.hp === 0) {
        return actor.die();
      } else {
        if (actor.flash) {
          return actor.flash();
        }
      }
    };

    return BossAttackable;

  })();

  g.DeathOnBottomEdgeBehavior = (function() {

    function DeathOnBottomEdgeBehavior() {
      this.update = __bind(this.update, this);

    }

    DeathOnBottomEdgeBehavior.prototype.update = function(actor) {};

    return DeathOnBottomEdgeBehavior;

  })();

  g.CompositeWeapon = (function() {

    function CompositeWeapon(options) {
      this.cleanup = __bind(this.cleanup, this);

      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);
      this.weapons = options.weapons;
    }

    CompositeWeapon.prototype.update = function(actor) {
      var weapon, _i, _len, _ref, _results;
      _ref = this.weapons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        weapon = _ref[_i];
        _results.push(weapon.update(actor));
      }
      return _results;
    };

    CompositeWeapon.prototype.render = function(context) {
      var weapon, _i, _len, _ref, _results;
      _ref = this.weapons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        weapon = _ref[_i];
        _results.push(weapon.render(context));
      }
      return _results;
    };

    CompositeWeapon.prototype.cleanup = function() {
      var weapon, _i, _len, _ref, _results;
      _ref = this.weapons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        weapon = _ref[_i];
        _results.push(weapon.cleanup());
      }
      return _results;
    };

    return CompositeWeapon;

  })();

  g.Weapon = (function() {

    function Weapon(options) {
      this.cleanup = __bind(this.cleanup, this);

      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);
      this.playerOwned = (options != null ? options.playerOwned : void 0) || false;
      this.bullets = new g.CircularBuffer(100);
      this.tickDelay = (options != null ? options.delay : void 0) || 5;
      this.numSkippedTicks = 0;
      this.speed = options != null ? options.speed : void 0;
      this.direction = options != null ? options.direction : void 0;
      this.target = options != null ? options.target : void 0;
      this.color = options != null ? options.color : void 0;
      this.offset = options != null ? options.offset : void 0;
    }

    Weapon.prototype.update = function(actor) {
      var bullet, _i, _len, _ref, _results;
      if (this.numSkippedTicks === this.tickDelay) {
        if (actor.firing) {
          this._shoot(actor);
        }
        this.numSkippedTicks = 0;
      } else {
        this.numSkippedTicks++;
      }
      _ref = this.bullets.storage;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (bullet.update) {
          _results.push(bullet.update());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Weapon.prototype.render = function(context) {
      var bullet, _i, _len, _ref, _results;
      _ref = this.bullets.storage;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (bullet.render) {
          _results.push(bullet.render(context));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Weapon.prototype.cleanup = function(context) {};

    return Weapon;

  })();

  g.ShotWeapon = (function(_super) {

    __extends(ShotWeapon, _super);

    function ShotWeapon() {
      this._shoot = __bind(this._shoot, this);
      return ShotWeapon.__super__.constructor.apply(this, arguments);
    }

    ShotWeapon.prototype._shoot = function(actor) {
      return this.bullets.push(new g.StraightBullet({
        playerOwned: this.playerOwned,
        startPos: actor.pos.dup(),
        direction: this.direction,
        speed: this.speed,
        color: this.color,
        offset: this.offset
      }));
    };

    return ShotWeapon;

  })(g.Weapon);

  g.TargetedShotWeapon = (function(_super) {

    __extends(TargetedShotWeapon, _super);

    function TargetedShotWeapon() {
      this._shoot = __bind(this._shoot, this);
      return TargetedShotWeapon.__super__.constructor.apply(this, arguments);
    }

    TargetedShotWeapon.prototype._shoot = function(actor) {
      return this.bullets.push(new g.StraightBullet({
        playerOwned: this.playerOwned,
        startPos: actor.pos.dup(),
        direction: this.target.pos.difference(actor.pos).normalize(),
        speed: this.speed,
        color: this.color,
        offset: this.offset
      }));
    };

    return TargetedShotWeapon;

  })(g.Weapon);

  g.HomingShotWeapon = (function(_super) {

    __extends(HomingShotWeapon, _super);

    function HomingShotWeapon(options) {
      this._shoot = __bind(this._shoot, this);

      var _ref;
      HomingShotWeapon.__super__.constructor.call(this, options);
      if ((_ref = this.speed) == null) {
        this.speed = 3;
      }
    }

    HomingShotWeapon.prototype._shoot = function(actor) {
      return this.bullets.push(new g.HomingBullet({
        playerOwned: this.playerOwned,
        startPos: actor.pos.dup(),
        target: game.player,
        lifetime: 200,
        delay: 10,
        speed: this.speed,
        color: this.color,
        offset: this.offset
      }));
    };

    return HomingShotWeapon;

  })(g.Weapon);

  g.FastInBehavior = (function() {

    function FastInBehavior(numTicks) {
      this.update = __bind(this.update, this);
      this.numTicks = numTicks;
    }

    FastInBehavior.prototype.update = function(actor) {
      if (this.numTicks === 0) {
        this.update = null;
      }
      actor.pos.y -= 10;
      return this.numTicks--;
    };

    return FastInBehavior;

  })();

  g.LeftRightOscillate = (function(_super) {

    __extends(LeftRightOscillate, _super);

    function LeftRightOscillate(options) {
      this.update = __bind(this.update, this);
      LeftRightOscillate.__super__.constructor.call(this, options);
      this.stage = 0;
      this.curDirection = options.initialDirection || 1;
      this.delayAfterMovement = options.delayAfterMovement || 70;
      this.movementTicks = options.movementTicks || 30;
      this.movementSpeed = options.movementSpeed || 10;
      this.numTicks = this.movementTicks;
    }

    LeftRightOscillate.prototype.update = function(actor) {
      LeftRightOscillate.__super__.update.call(this, actor);
      if (this.numTicks <= 0 && this.stage === 0) {
        this.velocity.x -= this.curDirection * this.movementSpeed;
        this.curDirection *= -1;
        this.stage = 1;
        this.numTicks = this.movementTicks;
      } else if (this.stage === 0) {
        this.numTicks--;
      }
      if (this.numTicks > 0 && this.stage === 1) {
        return this.numTicks--;
      } else if (this.stage === 1) {
        this.velocity.x -= this.curDirection * this.movementSpeed;
        this.numTicks = this.delayAfterMovement;
        return this.stage = 0;
      }
    };

    return LeftRightOscillate;

  })(g.Behavior);

  g.SquareMovement = (function(_super) {

    __extends(SquareMovement, _super);

    function SquareMovement(options) {
      this.update = __bind(this.update, this);
      SquareMovement.__super__.constructor.call(this, options);
      this.numTicks = 50;
      this.stage = 0;
    }

    SquareMovement.prototype.update = function(actor) {
      SquareMovement.__super__.update.call(this, actor);
      switch (this.stage) {
        case 0:
          this.velocity.x = 0;
          this.velocity.y = 10;
          break;
        case 1:
          this.velocity.x = 10;
          this.velocity.y = 0;
          break;
        case 2:
          this.velocity.x = 0;
          this.velocity.y = -10;
          break;
        case 3:
          this.velocity.x = -10;
          this.velocity.y = 0;
      }
      this.numTicks--;
      if (this.numTicks <= 0) {
        this.stage += 1;
        this.stage %= 4;
        if (this.stage % 2 === 0) {
          return this.numTicks = 50;
        } else {
          return this.numTicks = 30;
        }
      }
    };

    return SquareMovement;

  })(g.Behavior);

  g.IndexedWeaponChangeBehavior = (function() {

    function IndexedWeaponChangeBehavior(weaponIndex) {
      this.update = __bind(this.update, this);
      this.weaponIndex = weaponIndex;
    }

    IndexedWeaponChangeBehavior.prototype.update = function(actor) {
      actor.weapon = actor.weapons[this.weaponIndex];
      actor.firing = true;
      return this.update = null;
    };

    return IndexedWeaponChangeBehavior;

  })();

  g.DutyCycleWeapon = (function() {

    function DutyCycleWeapon(cycleOnTime, cycleOffTime) {
      this.update = __bind(this.update, this);
      this.cycleOnTime = cycleOnTime;
      this.cycleOffTime = cycleOffTime;
      this.timeInStage = 0;
      this.stage = 1;
      this.weapon = null;
    }

    DutyCycleWeapon.prototype.update = function(actor) {
      this.timeInStage++;
      if (this.stage === 1 && this.timeInStage >= this.cycleOnTime) {
        this.timeInStage = 0;
        actor.firing = false;
        this.stage = 0;
      }
      if (this.stage === 0 && this.timeInStage >= this.cycleOffTime) {
        this.timeInStage = 0;
        actor.firing = true;
        return this.stage = 1;
      }
    };

    return DutyCycleWeapon;

  })();

  g.NullWeapon = (function() {

    function NullWeapon() {}

    NullWeapon.prototype.render = function() {};

    NullWeapon.prototype.update = function() {};

    NullWeapon.prototype.cleanup = function() {};

    return NullWeapon;

  })();

  g.Turret = (function(_super) {

    __extends(Turret, _super);

    function Turret(options) {
      Turret.__super__.constructor.call(this, options);
      this.behavior = new g.StandardCompositeBehavior([]);
      this.weapon = new g.TargetedShotWeapon({
        target: options.target,
        delay: options.delay || 50
      });
      this.image = IMAGES["25_enemy_5"];
    }

    Turret.prototype.update = function(actor) {
      return Turret.__super__.update.call(this, actor);
    };

    return Turret;

  })(g.Enemy);

  g.DownwardShooter = (function(_super) {

    __extends(DownwardShooter, _super);

    function DownwardShooter(options) {
      DownwardShooter.__super__.constructor.call(this, options);
      this.behavior = new g.StandardCompositeBehavior([
        new g.Behavior({
          direction: options.direction,
          speed: 5
        })
      ]);
      this.weapon = new g.ShotWeapon({
        delay: 25,
        direction: DOWN,
        speed: 5
      });
      this.image = IMAGES["25_enemy_5"];
    }

    return DownwardShooter;

  })(g.Enemy);

  g.OscillatingBomber = (function(_super) {

    __extends(OscillatingBomber, _super);

    function OscillatingBomber(options) {
      OscillatingBomber.__super__.constructor.call(this, options);
      this.size = new g.Point(50, 25);
      this.behavior = new g.CompositeBehavior([
        new g.DriftingBehavior(), new g.LeftRightOscillate({
          direction: new g.Point(0, 0),
          speed: 5
        }), new g.Attackable(20), new g.DeathOnBottomEdgeBehavior()
      ]);
      this.weapon = new g.ShotWeapon({
        delay: 3,
        direction: DOWN,
        speed: 5
      });
      this.image = IMAGES["50_wide_enemy_1"];
    }

    return OscillatingBomber;

  })(g.Enemy);

  g.Boss = (function(_super) {

    __extends(Boss, _super);

    function Boss(options) {
      this.die = __bind(this.die, this);
      Boss.__super__.constructor.call(this, options);
      this.size = new g.Point(100, 100);
      this.behavior = new g.BossAttackable(450, [
        {
          threshold: 999,
          behavior: new g.CompositeBehavior([
            new g.LeftRightOscillate({
              initialDirection: 1,
              direction: new g.Point(0, 0),
              speed: 5,
              delayAfterMovement: 210
            }), new g.DutyCycleWeapon(150, 90)
          ])
        }, {
          position: new g.Point(450, 150),
          threshold: 300,
          behavior: new g.CompositeBehavior([
            new g.LeftRightOscillate({
              initialiDirection: -1,
              direction: new g.Point(0, 0),
              speed: 5
            }), new g.IndexedWeaponChangeBehavior(1)
          ])
        }, {
          position: new g.Point(150, 150),
          threshold: 150,
          behavior: new g.CompositeBehavior([
            new g.SquareMovement({
              direction: new g.Point(0, 0),
              speed: 0
            }), new g.IndexedWeaponChangeBehavior(2)
          ])
        }
      ]);
      this.weapons = [];
      this.weapons[0] = new g.CompositeWeapon({
        weapons: [
          new g.ShotWeapon({
            delay: 4,
            direction: DOWN,
            speed: 5,
            offset: new g.Point(10, 40)
          }), new g.ShotWeapon({
            delay: 4,
            direction: DOWN,
            speed: 5,
            offset: new g.Point(-10, 40)
          }), new g.ShotWeapon({
            delay: 4,
            direction: new g.Point(.1, .8),
            speed: 5,
            offset: new g.Point(25, 40)
          }), new g.ShotWeapon({
            delay: 4,
            direction: new g.Point(-.1, .8),
            speed: 5,
            offset: new g.Point(-25, 40)
          }), new g.ShotWeapon({
            delay: 4,
            direction: new g.Point(-.2, .7),
            speed: 5,
            offset: new g.Point(-35, 20)
          }), new g.ShotWeapon({
            delay: 4,
            direction: new g.Point(.2, .7),
            speed: 5,
            offset: new g.Point(35, 20)
          })
        ]
      });
      this.weapons[1] = new g.CompositeWeapon({
        weapons: [
          new g.ShotWeapon({
            delay: 4,
            direction: DOWN,
            speed: 5,
            offset: new g.Point(30, 40)
          }), new g.ShotWeapon({
            delay: 4,
            direction: DOWN,
            speed: 5,
            offset: new g.Point(-30, 40)
          }), new g.TargetedShotWeapon({
            target: options.target,
            delay: 25,
            speed: 10,
            color: "yellow"
          }), new g.HomingShotWeapon({
            target: options.target,
            delay: 50,
            speed: 4,
            color: "green",
            lifetime: 100,
            offset: new g.Point(40, 0)
          }), new g.HomingShotWeapon({
            target: options.target,
            delay: 50,
            speed: 4,
            color: "green",
            lifetime: 100,
            offset: new g.Point(-40, 0)
          })
        ]
      });
      this.weapons[2] = new g.CompositeWeapon({
        weapons: [
          new g.TargetedShotWeapon({
            target: options.target,
            delay: 15,
            speed: 4,
            color: "yellow",
            offset: new g.Point(50, 0)
          }), new g.TargetedShotWeapon({
            target: options.target,
            delay: 15,
            speed: 4,
            color: "yellow",
            offset: new g.Point(-50, 0)
          }), new g.TargetedShotWeapon({
            target: options.target,
            delay: 15,
            speed: 4,
            color: "yellow",
            offset: new g.Point(0, 50)
          }), new g.TargetedShotWeapon({
            target: options.target,
            delay: 15,
            speed: 4,
            color: "yellow",
            offset: new g.Point(0, -50)
          }), new g.TargetedShotWeapon({
            target: options.target,
            delay: 15,
            speed: 4,
            color: "yellow",
            offset: new g.Point(0, 0)
          }), new g.HomingShotWeapon({
            target: options.target,
            delay: 17,
            speed: 4,
            color: "green",
            lifetime: 100,
            offset: new g.Point(0, 0)
          })
        ]
      });
      this.weapon = this.weapons[0];
      this.image = IMAGES["boss"];
    }

    Boss.prototype.die = function() {
      return game.end();
    };

    return Boss;

  })(g.Enemy);

  g.ParabolicBullet = (function(_super) {

    __extends(ParabolicBullet, _super);

    function ParabolicBullet(options) {
      this.update = __bind(this.update, this);

      var _ref;
      ParabolicBullet.__super__.constructor.call(this, options);
      if ((_ref = this.speed) == null) {
        this.speed = 1;
      }
      this.velocity = this.direction.dup();
      this.velocity.scalarMultiply(this.speed);
      this.acceleration = options.acceleration || new g.Point(0, 0.05);
    }

    ParabolicBullet.prototype.update = function() {
      ParabolicBullet.__super__.update.call(this);
      this.velocity.x += this.acceleration.x;
      this.velocity.y += this.acceleration.y;
      if (this.livedTicks >= this.lifetime) {
        this.render = null;
        this.update = null;
      } else {
        this.livedTicks++;
      }
      this.pos.x += this.velocity.x;
      return this.pos.y += this.velocity.y;
    };

    return ParabolicBullet;

  })(g.Bullet);

  g.ParabolicShooter = (function(_super) {

    __extends(ParabolicShooter, _super);

    function ParabolicShooter(options) {
      this._shoot = __bind(this._shoot, this);
      ParabolicShooter.__super__.constructor.call(this, options);
    }

    ParabolicShooter.prototype._shoot = function(actor) {
      return this.bullets.push(new g.ParabolicBullet({
        playerOwned: this.playerOwned,
        startPos: actor.pos.dup(),
        target: game.player,
        lifetime: 200,
        delay: 10,
        speed: this.speed,
        color: this.color,
        offset: this.offset,
        direction: this.direction
      }));
    };

    return ParabolicShooter;

  })(g.Weapon);

  g.ShowerMonster = (function(_super) {

    __extends(ShowerMonster, _super);

    function ShowerMonster(options) {
      this.die = __bind(this.die, this);
      ShowerMonster.__super__.constructor.call(this, options);
      this.size = new g.Point(100, 50);
      this.image = IMAGES["shower"];
      this.behavior = new g.CompositeBehavior([
        new g.Attackable(100), new g.LeftRightOscillate({
          direction: new g.Point(0, 0),
          speed: 5,
          delayAfterMovement: 1,
          movementSpeed: 0.1,
          movementTicks: 600
        })
      ]);
      this.weapon = new g.CompositeWeapon({
        weapons: [
          new g.ParabolicShooter({
            direction: DOWN,
            color: "#92c4f4"
          }), new g.ParabolicShooter({
            delay: 15,
            direction: new g.Point(.17, .75),
            color: "#92c4f4",
            offset: new g.Point(8, 7)
          }), new g.ParabolicShooter({
            delay: 9,
            direction: new g.Point(.25, .65),
            color: "#92c4f4",
            offset: new g.Point(15, 6)
          }), new g.ParabolicShooter({
            delay: 15,
            direction: new g.Point(.32, .6),
            color: "#92c4f4",
            offset: new g.Point(18, 10)
          }), new g.ParabolicShooter({
            delay: 9,
            direction: new g.Point(.5, .5),
            color: "#92c4f4",
            offset: new g.Point(27, 13)
          }), new g.ParabolicShooter({
            delay: 15,
            direction: new g.Point(.6, .5),
            color: "#92c4f4",
            offset: new g.Point(27, 13)
          }), new g.ParabolicShooter({
            delay: 7,
            direction: new g.Point(.7, .5),
            color: "#92c4f4",
            offset: new g.Point(27, 13)
          }), new g.ParabolicShooter({
            delay: 7,
            direction: new g.Point(.8, .5),
            color: "#92c4f4",
            offset: new g.Point(30, 13)
          }), new g.ParabolicShooter({
            delay: 9,
            direction: new g.Point(-.17, .75),
            color: "#92c4f4",
            offset: new g.Point(-8, 7)
          }), new g.ParabolicShooter({
            delay: 15,
            direction: new g.Point(-.25, .65),
            color: "#92c4f4",
            offset: new g.Point(-15, 6)
          }), new g.ParabolicShooter({
            delay: 17,
            direction: new g.Point(-.32, .6),
            color: "#92c4f4",
            offset: new g.Point(-18, 10)
          }), new g.ParabolicShooter({
            delay: 7,
            direction: new g.Point(-.5, .5),
            color: "#92c4f4",
            offset: new g.Point(-27, 13)
          }), new g.ParabolicShooter({
            delay: 15,
            direction: new g.Point(-.6, .5),
            color: "#92c4f4",
            offset: new g.Point(-27, 13)
          }), new g.ParabolicShooter({
            delay: 9,
            direction: new g.Point(-.7, .5),
            color: "#92c4f4",
            offset: new g.Point(-27, 13)
          }), new g.ParabolicShooter({
            delay: 9,
            direction: new g.Point(-.8, .5),
            color: "#92c4f4",
            offset: new g.Point(-30, 13)
          })
        ]
      });
    }

    ShowerMonster.prototype.die = function() {
      var _this = this;
      notify("Shower Head: The shower is inescapable!");
      this.behavior = new g.Attackable(80);
      return this.die = function() {
        notify("Shower Head: You have yet to even scratch me!");
        _this.behavior = new g.Attackable(80);
        return _this.die = function() {
          notify("Shower Head: I feel like I'm getting a little leaky..!");
          _this.behavior = new g.Attackable(80);
          return _this.die = function() {
            notify("Shower Head: What!? You weren't supposed to be able to defeat me!");
            return game.defeatSecretLevel();
          };
        };
      };
    };

    return ShowerMonster;

  })(g.Enemy);

  g.TestLevelOne = (function(_super) {

    __extends(TestLevelOne, _super);

    function TestLevelOne(startTick, game) {
      var bossEvent, firstEvent, i, leftParabolicEnemy, rightParabolicEnemy, secondEvent, thirdEvent, _i, _j, _k, _l;
      TestLevelOne.__super__.constructor.call(this, startTick);
      firstEvent = new g.Event(0, this);
      for (i = _i = 0; _i <= 9; i = ++_i) {
        firstEvent.enemyQueue.push(new g.Turret({
          target: game.player,
          startTick: i * 50,
          pos: new g.Point(i * 50 + 50, -10),
          event: event
        }));
      }
      for (i = _j = 0; _j <= 10; i = ++_j) {
        firstEvent.enemyQueue.push(new g.Turret({
          target: game.player,
          startTick: 200 + i * 100,
          pos: new g.Point(100, -10),
          event: event
        }));
        firstEvent.enemyQueue.push(new g.Turret({
          target: game.player,
          startTick: 200 + i * 100,
          pos: new g.Point(500, -10),
          event: event
        }));
      }
      secondEvent = new g.Event(1000, this);
      leftParabolicEnemy = new g.Enemy({
        startTick: 0,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: LEFT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      rightParabolicEnemy = new g.Enemy({
        startTick: 0,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: RIGHT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      secondEvent.enemyQueue.push(leftParabolicEnemy);
      secondEvent.enemyQueue.push(rightParabolicEnemy);
      leftParabolicEnemy = new g.Enemy({
        startTick: 75,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: LEFT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      rightParabolicEnemy = new g.Enemy({
        startTick: 150,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: RIGHT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      secondEvent.enemyQueue.push(leftParabolicEnemy);
      secondEvent.enemyQueue.push(rightParabolicEnemy);
      leftParabolicEnemy = new g.Enemy({
        startTick: 225,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: LEFT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      rightParabolicEnemy = new g.Enemy({
        startTick: 300,
        pos: new g.Point(WIDTH / 2, 0),
        behavior: new g.StandardCompositeBehavior([
          new g.ParabolicMoveBehavior({
            speed: 3,
            direction: RIGHT,
            acceleration: new g.Point(0, 0.08)
          })
        ]),
        weapon: new g.ShotWeapon({
          delay: 8,
          direction: DOWN
        }),
        image: IMAGES["25_enemy_4"],
        event: event
      });
      secondEvent.enemyQueue.push(leftParabolicEnemy);
      secondEvent.enemyQueue.push(rightParabolicEnemy);
      thirdEvent = new g.Event(1500, this);
      for (i = _k = 0; _k <= 10; i = ++_k) {
        thirdEvent.enemyQueue.push(new g.Turret({
          target: game.player,
          startTick: 0,
          pos: new g.Point(100 + i * 50, -10),
          event: event,
          delay: 20
        }));
        thirdEvent.enemyQueue.push(new g.Turret({
          target: game.player,
          startTick: 0,
          pos: new g.Point(150 + i * 50, -60),
          event: event,
          delay: 20
        }));
      }
      for (i = _l = 0; _l <= 5; i = ++_l) {
        thirdEvent.enemyQueue.push(new g.OscillatingBomber({
          startTick: 500,
          pos: new g.Point(i * 100 + 200, 10),
          event: event
        }));
      }
      bossEvent = new g.Event(3000, this);
      bossEvent.enemyQueue.push(new g.Boss({
        startTick: 0,
        pos: new g.Point(450, 150),
        event: event,
        target: game.player
      }));
      this.eventQueue.push(firstEvent);
      this.eventQueue.push(secondEvent);
      this.eventQueue.push(thirdEvent);
      this.eventQueue.push(bossEvent);
    }

    return TestLevelOne;

  })(g.Level);

  g.SecretLevel = (function(_super) {

    __extends(SecretLevel, _super);

    function SecretLevel(startTick, game) {
      var boss, bossEvent;
      SecretLevel.__super__.constructor.call(this, startTick);
      bossEvent = new g.Event(0, this);
      boss = new g.ShowerMonster({
        startTick: 0,
        pos: new g.Point(300, 100)
      });
      bossEvent.enemyQueue.push(boss);
      this.eventQueue.push(bossEvent);
    }

    return SecretLevel;

  })(g.Level);

}).call(this);
